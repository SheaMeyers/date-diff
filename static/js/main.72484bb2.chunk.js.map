{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","focusedInput","setFocusedInput","startDate","setStartDate","endDate","setEndDate","className","startDateId","endDateId","onDatesChange","handleDatesChanged","onFocusChange","isOutsideRange","diff","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAwCeA,MAhCf,WAAgB,IAAD,EAE2BC,mBAAyC,MAFpE,mBAENC,EAFM,KAEQC,EAFR,OAIqBF,mBAA+B,MAJpD,mBAING,EAJM,KAIKC,EAJL,OAKiBJ,mBAA+B,MALhD,mBAKNK,EALM,KAKGC,EALH,KAYb,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,kBAAD,CACEJ,UAAWA,EACXK,YAAY,gBACZH,QAASA,EACTI,UAAU,cACVC,cAAe,mBAZM,SAACP,EAAiCE,GAC3DD,EAAaD,GACbG,EAAWD,GAUoCM,CAA5B,EAAGR,UAAH,EAAcE,UAC7BJ,aAAcA,EACdW,cAAe,SAAAX,GAAY,OAAIC,EAAgBD,IAC/CY,eAAgB,kBAAM,KAGtBV,GAAaE,GACb,uCAAS,4BAAIA,EAAQS,KAAKX,EAAW,UAArC,qCCpBOY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.72484bb2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'react-dates/initialize';\nimport { DateRangePicker } from 'react-dates';\nimport Moment from 'moment';\nimport 'react-dates/lib/css/_datepicker.css';\nimport './App.css';\n\n\nfunction App() {\n\n  const [focusedInput, setFocusedInput] = useState<'startDate' | 'endDate' | null>(null);\n\n  const [startDate, setStartDate] = useState<Moment.Moment | null>(null);\n  const [endDate, setEndDate] = useState<Moment.Moment | null>(null);\n\n  const handleDatesChanged = (startDate: Moment.Moment | null, endDate: Moment.Moment | null) => {\n    setStartDate(startDate);\n    setEndDate(endDate);\n  }\n\n  return (\n    <div className=\"App\">\n      <DateRangePicker\n        startDate={startDate}\n        startDateId=\"start_date_id\"\n        endDate={endDate}\n        endDateId=\"end_date_id\"\n        onDatesChange={({ startDate, endDate }) => handleDatesChanged(startDate, endDate)}\n        focusedInput={focusedInput}\n        onFocusChange={focusedInput => setFocusedInput(focusedInput)}\n        isOutsideRange={() => false}\n      />\n      {\n        startDate && endDate &&\n        <p>It is <b>{endDate.diff(startDate, 'days')}</b> days between the two dates</p>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}